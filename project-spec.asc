// vim: sts=4 sw=4 expandtab

= Projeto Final: ParkSys
// Marcelo Criscuolo <criscuolo@ifsp.edu.br>
:imagesdir: images
:toc: left
:toc-title: Sumário
:source-highlighter: pygments
// :pygments-style: tomorrow
// :pygments-style: trac
:pygments-style: manni
:source-linenums-option:
:icons: font
:sectlinks:
// :sectanchors:
:sectnums:
:stem: latexmath
:figure-caption: Figura


Neste projeto, você vai desenvolver um sistema para operação de estacionamentos.


[#overview]
== Visão Geral

O sistema de operação de estacionamentos, ParkSys, deverá realizar as seguintes funções:

- Registrar o tempo de permanência de veículos em um estacionamento;
- Calcular tarifas; e
- Gerar dados de apoio à decisão, na forma de gráficos.

O estacionamento poderá atender clientes _avulsos e mensalistas_.
A cobrança será realizada por blocos de tempo com duração de 1 (uma) ou de 1/2 (meia) hora.
O usuário poderá configurar a duração dos blocos de tempo, assim como o valor da tarifa cobrada por bloco -- R$ 2,00 a cada bloco de meia hora, por exemplo.


O sistema deve ter interface gráfica com o usuário (GUI), baseada em janelas -- isto é, deve ser um sistema _desktop_ -- e deve ser desenvolvido na linguagem Java, por meio do _framework_ Swing.
Os dados de operação do estacionamento devem ser armazenados em um banco de dados relacional, gerenciado pelo sistema MySQL.

A interface do sistema deve ser composta por uma tela principal, que dará acesso a telas auxiliares conforme a função escolhida pelo usuário.
Por exemplo, o usuário pode selecionar a opção _cadastrar cliente_ na tela principal e o sistema apresentará uma tela auxiliar de cadastro.

Veja um exemplo de interface nas figuras a seguir. O botão _Entrada / Saída_, na <<#main-window>> deve abrir a tela <<#saida-avulso>>.


[.float-group]
--
[#main-window]
[.left]
.Tela principal
image::main.png[Tela principal,80%]

[#saida-avulso]
[.left]
.Saída de cliente 
image::saida-avulso.png[Saída de cliente,80%]
--

.Importante
Estas figuras são meramente ilustrativas. Como desenvolvedor do sistema, você é livre para projetar sua própria interface, desde que ela atenda aos requisitos especificados neste documento.

Nas seções a seguir, você encontrará detalhes de funcionamento do sistema, na forma de casos de uso.
Seu projeto também deverá atender aos requisitos não-funcionais, que estão listados <<#req-nf, no final deste documento>>.

No final deste documento você encontrará orientações importantes sobre o <<#processo>>.


[#use-cases]
== Casos de Uso

Neste documento, a maior parte dos casos de uso está apresentada em forma narrativa.
Contudo, os dois casos de uso principais (entrada e saída de veículos) foram apresentados detalhadamente, na forma de _sequência de ações_.
Trata-se de algo semelhante a um _ping-pong_ entre usuário e sistema.
Por exemplo:

====
. O usuário executa a operação A.
. O sistema responde exibindo a tela X.
====

Nas seções a seguir, estão descritos os casos de uso do sistema. 


[#uc-entrada]
=== Registrar Entrada

Este caso de uso se inicia quando o usuário do ParkSys avista um veículo passando pelo portão de entrada do estacionamento.


==== Sequência de ações

. O usuário aciona a opção _Entrada / Saída_, na tela principal do ParkSys.
. O sistema exibe a tela de _Entrada de veículos_, pronta para a digitação da placa.
A tela deve se abrir com o foco de digitação (cursor) no campo _Placa_.
. O usuário informa a placa do veículo ao sistema.
. O sistema classifica a operação como _entrada_ ou _saída_. 
A operação será de _saída_ se houver um registro para aquela placa com horário de saída em branco. Caso contrário, será uma operação de _entrada_.
. O sistema adapta a tela atual para realizar a operação de entrada _(neste caso de uso)_.
Isto é, o sistema exibe os controles de interface necessários à operação de entrada.
. O sistema indica na tela se a placa pertence a um cliente _avulso_ ou _mensalista_.
Para isso, o sistema consulta o cadastro de mensalistas no banco de dados.
. O sistema obtém automaticamente a data e hora atual.
. O sistema exibe as seguintes informações, na tela de _Entrada de veículos_:
    - Horário de entrada
    - Duração do bloco de cobranca (1 hora ou 1/2 hora)
    - Preço por bloco de cobrança
. O usuário informa ao sistema uma descrição do veículo. Por exemplo: _"Corsa vermelho"_ ou _"Uno branco"_.
. O usuário aciona o botão _Registrar Entrada_.
. O sistema registra os seguintes dados de entrada do veículo banco de dados:
    - Placa do veículo;
    - Descrição do veículo;
    - Horário de entrada (data e hora);
    - Duração do bloco de cobrança;
    - Preço do bloco de cobrança.
. O sistema oculta a tela de _Entrada de veículos_.
. O sistema atualiza a tela principal, indicando o número de veículos estacionados e o número de vagas livres.
. Se não houver mais vagas livres, o sistema exibe um indicador de _estacionamento cheio_.
Esse indicador deve ser exibido em destaque.


==== Requisitos de interface

O sistema deve usar a mesma janela tanto para <<#uc-entrada, entrada>> quanto para <<#uc-saida, saída>> de veículos.
A janela deve se adaptar automaticamente em função da placa do veículo, informada pelo usuário. 

A adaptação da tela pode ser implementada por meio de link:https://docs.oracle.com/javase/tutorial/uiswing/layout/card.html[Card Layout].

A operação pode ser cancelada pelo usuário a qualquer momento, por meio do botão _Cancelar_.
Neste caso, nada será gravado no banco de dados.


[#uc-saida]
=== Registrar Saída

Este caso de uso se inicia quando o usuário do ParkSys avista um veículo passando pelo portão de saída do estacionamento.


==== Sequência de ações

. O usuário aciona a opção _Entrada / Saída_, na tela principal do ParkSys.
. O sistema exibe a tela de _Saída de veículos_, pronta para a digitação da placa.
A tela deve se abrir com o foco de digitação (cursor) no campo _Placa_.
. O usuário informa a placa do veículo ao sistema.
. O sistema classifica a operação como _entrada_ ou _saída_. 
A operação será de _saída_ se houver um registro para aquela placa com horário de saída em branco. Caso contrário, será uma operação de _entrada_.
. O sistema adapta a tela atual para realizar a operação de saída _(neste caso de uso)_.
. O sistema indica na tela se a placa pertence a um cliente _avulso_ ou _mensalista_.
. O sistema obtém automaticamente a data e hora atual.
. O sistema computa o tempo de permanência do veículo no estacionamento, em minutos.
Deve ser usada a data e hora atual do sistema.
. O sistema calcula a quantidade de blocos de cobrança, pela expressão: 
stem:[nblocos = \lceil tempo / duracao \rceil],
onde stem:[nblocos] representa o número de blocos de cobrança, stem:[tempo] representa o tempo de permanência do veículo e stem:[duracao] representa a duração de um bloco de cobrança.
A quantidade de blocos deve ser arrendondada para cima.
Por exemplo, se o tempo de permanência for de 68 minutos e a duração do bloco for de 30 minutos, o número de blocos será stem:[\lceil 68 / 30 \rceil = 3].
. O sistema calcula o total a pagar, pela expressão:
stem:[total = nblocos \times preco].
. O sistema exibe na tela:
    - Horário de entrada do veículo;
    - Horário de saída;
    - O tempo de permanência no estacionamento (em minutos);
    - Duração do bloco de cobranca (1 hora ou 1/2 hora);
    - Preço por bloco de cobrança;
    - A quantidade de blocos de cobrança devida;
    - Total a pagar.
. O usuário recebe o valor da tarifa de permanência.
. O usuário aciona o botão _Registrar saída_.
. O sistema registra os seguintes dados do veículo banco de dados:
    - Horário de saída (data e hora);
    - Quantidade de blocos de cobrança devida;
    - Total a pagar.
. O sistema oculta a tela de _Saída de veículos_.
. O sistema atualiza a tela principal, indicando o número de veículos estacionados e o número de vagas livres.
. Se o estacionamento não estiver cheio, o sistema oculta o indicador de _estacionamento cheio_.


==== Fluxos alternativos

.Cliente mensalista
[start=12]
. Se o cliente for mensalista, o sistema deve debitar a cobrança do seu saldo atual.

.Cliente mensalista sem saldo
[start=12]
. Se não houver saldo suficiente para um cliente mensalista, o sistema exibe a tela de _pagamento mensal_.
O cliente poderá fazer um pagamento, com valor mínimo igual ao valor total devido.
. O usuário informa o valor pago pelo cliente.
. O usuário aciona o botão _registrar pagamento_.
Se o valor pago for maior do que valor devido, a diferença ficará como crédito futuro.
. O sistema oculta a tela de _pagamentos mensal_.
. O sistema registra os seguintes dados do veículo banco de dados:
    - Horário de saída (data e hora);
    - Quantidade de blocos de cobrança devida;
    - Total a pagar.
. O sistema oculta a tela de _Saída de veículos_.
. O sistema atualiza a tela principal, indicando o número de veículos estacionados e o número de vagas livres.
. Se o estacionamento não estiver cheio, o sistema oculta o indicador de _estacionamento cheio_.

[#uc-cadastro-mensalista]
=== Cadastrar Mensalista

O usuário do sistema registra os dados de um cliente mensalista -- isto é, um cliente que pagará mensalmente pelo uso do estacionamento.
Devem ser registrados os seguintes dados:

- CPF do cliente;
- Nome do cliente;
- Telefone celular;
- Observações -- onde trabalha, etc.

Ao finalizar este cadastro, o sistema inicia automaticamente o caso de uso <<#uc-gerenciar-veiculos>>.


[#uc-gerenciar-veiculos]
=== Gerenciar Veículos

Este caso de uso se inicia quando o usuário seleciona a opção _gerenciar veículos_, na tela principal.
Este caso de uso também pode ser iniciado automaticamente pelo sistema.

O usuário busca por um cliente mensalista, previamente cadastrado (ver <<#uc-cadastro-mensalista>>).
A busca pode ser feita por CPF ou por número do telefone celular.
O sistema exibe o nome, o número do celular do cliente e seu saldo atual -- em dinheiro e em blocos de 1 hora.
Se o cliente não for encontrado, o sistema exibe um aviso.

O usuário poderá cadastrar um ou mais veículos que serão associados ao cliente encontrado no banco de dados.

O sistema deve registrar os seguintes dados, para cada veículo:

- Placa do veículo;
- Descrição -- exemplo "Fiat Uno branco".


[#uc-pagar-mensal]
=== Fazer pagamento mensal

O usuário busca por um cliente mensalista, previamente cadastrado (ver <<#uc-cadastro-mensalista>>).
A busca pode ser feita por CPF ou por número do telefone celular.
O sistema exibe o nome, o número do celular do cliente e seu saldo atual -- em dinheiro e em blocos de 1 hora.
Se o cliente não for encontrado, o sistema exibe um aviso.

O usuário informa o valor a ser pago pelo cliente.
O sistema converte o valor em um saldo em horas.
Clientes mensalistas tem um desconto de 30% sobre o valor de 1 hora, mas devem adquirir uma quantidade mínima de 80 horas, para fazer jus ao desconto^(*)^.

O sistema registra:

- Data do pagamento;
- Valor pago;
- Saldo em horas.

O sistema atualiza o saldo atual do cliente, somando a quantidade horas adquirida.


_(*) Esses valores são configuráveis. Veja o caso de uso <<#uc-config>>._


[#uc-visualizar-saldo]
=== Visualizar Saldo

Quando o usuário seleciona a opção _visualizar saldo_ -- na tela principal -- , o sistema inicia o caso de uso <<#uc-gerenciar-veiculos>>.
A informação do saldo poderá ser consultada na tela daquele caso de uso.


[#uc-consultar-permanencia]
=== Consultar Tempo de Permanência

Neste caso de uso, o usuário deseja saber o tempo médio de permanência de um veículo no estacionamento por dia da semana.
O usuário informa o período de tempo que deseja analisar -- data inicial e data final.
O sistema computa o tempo médio de permanência dos veículos nesse período, agrupados por dia da semana.
O sistema exibe o resultado na forma de um gráfico, que deve ser semelhante ao que está ilustrado a seguir.

--
[#permanencia]
.Gráfico de tempo médio de permanência por dia da semana
image::permanencia.png[Gráfico tempo médio de permanência por dia da semana]
--

****
O código-fonte para a geração deste gráfico está disponível no projeto inicial, que foi publicado no GitHub.
Verifique o arquivo `GraficoPermanencia.java` dentro do pacote `parksys.graficos`.
Você pode usá-lo como ponto de partida para sua implementação.

No exemplo, os dados estão fixos no código-fonte.
Você terá que implementar a consulta ao banco de dados.
****

[#uc-consultar-faturamento]
=== Consultar Faturamento

Neste caso de uso, o usuário deseja saber o faturamento diário do estacionamento em um período de tempo.
O usuário informa o período de tempo que deseja analisar -- data inicial e data final.
O sistema computa a soma do faturamento, agrupada por dia do mês.
O sistema exibe o resultado na forma de um gráfico, que deve ser semelhante ao que está ilustrado a seguir.

--
[#faturamento-diario]
.Gráfico de faturamento diário
image::faturamento-diario.png[Gráfico de faturamento diário]
--

****
O código-fonte para a geração deste exemplo está disponível no projeto inicial, que foi publicado no GitHub.
Verifique o arquivo `GraficoFaturamentoDiario.java` dentro do pacote `parksys.graficos`.
Você pode usá-lo como ponto de partida para sua implementação.

No exemplo, os dados estão fixos no código-fonte.
Você terá que implementar a consulta ao banco de dados.
****


[#uc-config]
=== Configurar Sistema

O usuário deseja configurar os seguintes parâmetros do sistema:

- Duração do bloco de cobrança (1 hora ou 1/2 hora);
- Tarifa cobrada por bloco (valor não-negativo);
- Desconto para mensalistas (em porcentagem);
- Quantidade mínima de horas a comprar, para que um mensalista faça jus ao desconto.

O sistema exibe uma janela para o usuário informe os valores desses parâmetros.
O usuário altera os parâmetros que desejar e o sistema os atualiza no banco de dados.

Na primeira vez que o sistema for executado, este caso de uso deve ser iniciado automaticamente, para o que o usuário faça as configurações necessárias.
O usuário poderá iniciar este caso de a qualquer momento, a partir da tela inicial.


[#req-nf]
== Requisitos não-funcionais

O sistema deverá atender aos seguintes requisitos não funcionais.


=== Arquitetura
- A arquitetura do ParkSys deve ser organizada em camadas.
- A camada de persistência deve ser implementada por meio do padrão DAO (_Data-Access Object_).
O uso do padrão DAO implica na definição de objetos de domínio -- objetos que representem entidades como veículos, clientes, etc.
- A camada de persistência deve propagar apenas um tipo de exceção.
Não deve propagar exceções que fortaleçam o acoplamento da camada de negócios com a tecnologia de persistência -- `SQLException`, por exemplo.
- Os componentes do software -- classes e métodos -- devem ser coesos e não devem acumular várias responsabilidades.
Por exemplo: classe responsável por criar a tela de cadastro de clientes _não deve_ acumular a responsabilidade de também acessar o banco de dados.

=== Banco de dados
- O MySQL deve ser usado como sistema gerenciador de bancos de dados (SGBD).
- Deve-se usar _transações_, para garantir a consistência de dados em operações que envolvam mais de uma tabela.
- O sistema deve ser distribuído juntamente com uma massa de dados, que permita testar as consultas (_queries_).
Isto é, deve haver um arquivo `data.sql`, dentro do diretório `resources`, que contenha dados de testes na forma de um conjunto de instruções `INSERT`.
- As consultas usadas no sistema devem ser estar contidas no arquivo `resources/queries.sql`.
Essa medida visa facilitar testes do projeto do banco de dados.
- As instruções para criação do banco de dados (DDL) -- `CREATE TABLE`, `CREATE VIEW`, etc. -- devem estar contidas no arquivo `resources/schema.sql`.

=== Interface
- Eventos devem ser tratados por meio de link:https://www.tutorialspoint.com/how-to-implement-an-action-listener-using-method-reference-in-java[referências para métodos] ou link:https://www.codejava.net/java-core/the-java-language/java-8-lambda-listener-example[lambdas].
Não usar classes internas (_inner classes_).
- A interface apresentada na seção <<#overview>> é apenas uma sugestão.
Você é livre para projetar uma interface para o sistema, desde que os requisitos sejam cumpridos.
Procure projetar uma interface que seja produtiva e amigável ao usuário.
- Horários e datas devem ser recuperados automaticamente do relógio do computador.
Essas informações _não devem_ ser solicitadas ao usuário.

=== Gráficos
Use a biblioteca XChart (https://knowm.org/open-source/xchart/) para gerar os gráficos.
Veja os exemplos de uso dessa biblioteca no código inicial do projeto, dentro do pacote `parksys.graficos`.

=== Repositório
Use o GitHub para:

- Fazer o controle de versões do código-fonte.
- Controlar itens de correção e de melhoria, os link:https://pt.stackoverflow.com/a/101722[_issues_].


[#processo]
== Processo de desenvolvimento

Nesta seção você encontrará informações importantes sobre como o projeto deverá ser desenvolvido.


=== Equipe

Este projeto poderá ser desenvolvido em equipes de _até 3 alunos_.


[#qa]
=== Controle de Qualidade (QA)

Um dos membros do projeto deve fazer o papel de testador.
De preferência, esse aluno *não poderá* participar do desenvolvimento de código-fonte.

O testador deve estar atento aos requisitos funcionais e não-funcionais especificados neste documento.
Deve fazer link:https://www.devmedia.com.br/testes-funcionais-de-software/23565#3[testes funcionais] do sistema com frequência durante o processo de desenvolvimento e deve abrir um link:https://pt.stackoverflow.com/a/101722[_issue_] no GitHub para cada problema que encontrar.
Os outros membros do projeto deverão corrigir os problemas e denvolver o _issue_ ao testador, que deverá verificar se o problema realmente foi corrigido, fechando então o _issue_.
Caso o problema não tenha sido corrigido, o testador devolverá o _issue_ aos desenvolvedores.

O testador também deverá inspecionar o código-fonte desenvolvido pelos outros membros do projeto, indicando problemas como uso de _inner classes_ e e falta de uso de transações em operações de bancos de dados (ver os requisitos indicados na seção <<#req-nf>>).


[#entregas-parciais]
=== Entregas parciais

O projeto deve ser desenvolvido de seguindo um link:https://blog.cronapp.io/desenvolvimento-iterativo-e-incremental/[processo iterativo e incremental], com entregas parciais semanais.

As entregas devem seguir o cronograma que será indicado no Moodle.


== Avaliação do trabalho

As notas serão atribuídas pelos seguintes critérios:

- Cumprimento dos requisitos funcionais e não-funcionais.
- Aderência ao processo de desenvolvimento, principalmente quanto ao <<#qa>> e às <<#entregas-parciais>>.

